"""
Signal Denoising Script for Raw IQ Files
----------------------------------------

This script processes raw IQ (In-phase/Quadrature) binary recordings by filtering out noise-only
segments based on a magnitude threshold. The input files are assumed to be in complex64 format 
without file extensions (e.g., generated by GNU Radio). The algorithm computes the magnitude of
each complex sample and applies an adaptive threshold:

    threshold = threshold_scale × (mean + 2 × std) of magnitudes

Only samples with magnitudes exceeding this threshold are retained, under the assumption that
useful signal bursts exhibit higher amplitude than the background noise floor.

The filtered output is saved in the same directory as the original file, with '_no_noise' appended
to the filename. This step is useful in applications like passive satellite signal classification,
where unmodulated or bursty radar signals (e.g., from Gaofen satellites) are sparsely embedded 
in long streams of noise.

Parameters:
    - root_dir (str): Path to directory containing IQ files.
    - threshold_scale (float): Scaling factor to adjust noise rejection aggressiveness (default: 0.35).
"""


import numpy as np
import os

# In the pre-processing stage, we isolate signal bursts and suppress noise-only regions by applying a magnitude-based threshold
# root_dir = os.getcwd()
root_dir = "RawIq"
# Walk through all the files in the subdirectories
for subdir, dirs, files in os.walk(root_dir):
    for file in files:
        # Skip files that already contain the string "noise" in their name
        if "noise" in file:
            continue
        
        # Construct the full file path
        file_path = os.path.join(subdir, file)
        
        # Load your IQ data from the file (assuming complex64 format)
        iq_data = np.fromfile(file_path, dtype=np.complex64)
        
        # Calculate the magnitude of each sample
        magnitude = np.abs(iq_data)
        
        # Set the threshold (e.g., mean + 2 * standard deviation)
        threshold = 0.35 * (np.mean(magnitude) + 2 * np.std(magnitude))
        
        # Filter out low-gain samples
        filtered_iq_data = iq_data[magnitude > threshold]
        
        # Create a new filename by appending '_no_noise' to the original name
        new_file_name = file.replace('.bin', '_no_noise.bin')
        new_file_path = os.path.join(subdir, new_file_name + "_no_noise")
        
        # Save the filtered data to the new file
        filtered_iq_data.tofile(new_file_path)
        
        # Print the name of the generated file
        print(f"Generated file: {new_file_path}")